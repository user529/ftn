
#. /etc/ftn.conf
shopt -s extglob
shopt -s nocasematch
func_list="@(convert|electionlog|electionrun|extrastake|setstake|adnl|balance|transactions|submit|recover|getconfig|config|runget|exec|help)"
ftn_version="0.1.2-1 (alpha)"


function version {
    echo "ftn $ftn_version"
}


function tonos {
    date
    echo "ftnlib.tonos: $@"
    cd "${FTN_DIR}/scripts"
    ${TONOS_CLI_DIR}/tonos-cli $@
    cd $OLD_PWD
}


function getconfig {
    tonos $@ 2>&1 | tee $FTN_LOG/$1.log
}


function config {
    tonos $@ 2>&1 | tee $FTN_LOG/$1.log
}


function runget {
    elector_addr=$(cat $FTN_KEYS_DIR/elections/elector-addr-base64)
    tonos $1 $elector_addr $2 2>&1 | tee $FTN_LOG/$1.log
}


function convert {
    tonos $1 tokens $2
}


function electionlog {
    if [ -z "$2" ]; then
        lines=14
    else
        if [ "$2" == "full" ]; then
            tail -n 30 "${FTN_LOG}/election.log"
            exit 0
        else
            lines=$2
        fi
    fi
    tail -n $lines "${FTN_LOG}/election.log" | grep "INFO:"
}


function electionrun {
    if [ -z $2 ]; then
        STAKE=$(cat "${FTN_KEYS_DIR}/elections/stake" 2>/dev/null || STAKE='')
    else
        STAKE=$2
    fi

    if [ -z "$STAKE" ]; then
        echo "<STAKE> is not set. Please use \"ftn setstake\" or \"ftn electionrun <STAKE>\""
    fi

    #truncate -s 0 "${FTN_LOG}/election.log"
    cd "${FTN_DIR}/scripts"
    ./validator_msig.sh $STAKE | tee -a "${FTN_LOG}/election.log" 2>&1
    cd "${OLDPWD}"
    tail -n 14 "${FTN_LOG}/election.log"
}


function extrastake {
    if [ -z "$2" ]; then
        echo "Amount of extrastake is not given."
        exit 0
    fi
    elector_addr=$(cat $FTN_KEYS_DIR/elections/elector-addr-base64)
    EXT_STAKE=$2
    payload="$(base64 --wrap=0 \"$FTN_KEYS_DIR/elections/validator-query.boc\")"

    # input parameters for 'submit' function
    # $1 = submit    # Must be equal to the function name
    # $2 - Target account
    # $3 - Tokens    # Please note this ia not NANOAMOUNT!
    # $4 - Bounce    # Can be False or True. 'True' is default value. Non case sensitive.
    # $5 - Payload   # Payload block
    submit "submit" $elector_addr $EXT_STAKE "True" $payload
}


function setstake { 
    . "${FTN_DIR}/scripts/env.sh"

#    function get_mid_stake {
#        ELECTOR_ADDR="$(cat "$KEYS_DIR/elections/elector-addr-base64")"
#            LC_OUTPUT="$($TON_BUILD_DIR/lite-client/lite-client \
#            -a 127.0.0.1:3031 \
#            -p $KEYS_DIR/liteserver.pub \
#            -rc "getconfig 34" \
#        -rc "$(printf "runmethod %s past_elections" "$ELECTOR_ADDR")" \
#        -rc "quit" 2>&1)"
#    #   echo $LC_OUTPUT
#        TOTAL_NODES=$(echo "$LC_OUTPUT" | perl -ne '/^\s*cur_validators:.*total:(\d+).*$/ && print $1')
#        TOTAL_STAKE=$(echo "$LC_OUTPUT" | \
#            perl -ne '/^result:\s*\[\s*\((?>\[\d+ \d+ \d+ \d+ [\{\}\(\)A-F0-9]+ (\d+) \d+ [\{\}\(\)A-F0-9]+\]\s*)*\)\s*\]\s*$/ && print $1')
#        TOTAL_STAKE=$((TOTAL_STAKE/1000000000))
#        MID_STAKE=$((TOTAL_STAKE/TOTAL_NODES))
#        echo "$TOTAL_STAKE/$TOTAL_NODES=$MID_STAKE"
#    }

    #get_mid_stake
    bal=$(ftn balance | grep "balance" | awk '{print $2}')
    echo "Account balance $bal"
    #echo "Got mid stake $MID_STAKE"

    if [ -n "$2" ]; then
        echo "Given the size of stake $2"
        stake=$2
    else
        stake=0
        echo "The stake size is not given. Set stake=$stake"
        #stake=$MID_STAKE
    fi

    if [[ $stake -gt $bal ]]; then
        echo "The stake is greater than the balance. The stake is aligned to the balance-1"
        stake=$((bal-1))
    fi

    if [[ $stake -lt 10000 ]]; then
        echo "The stake less than the minimal. Set 0 stake"
        stake=0
    fi
    echo $stake > "${FTN_KEYS_DIR}/elections/stake"
    echo "${stake} set as stake."


}
function adnl { 
    adnlfile="$FTN_KEYS_DIR/elections/$(hostname -s)-election-adnl-key"
    keyfile="$FTN_KEYS_DIR/elections/$(hostname -s)-election-key"
    if [ -z "${adnlfile}" ]; then
        echo "ADNL adress not found."
    else
        adnl=$(cat "${adnlfile}" | grep "created new key")
        pubkey=$(cat "${keyfile}" | grep "created new key")
        echo -e "adnl: ${adnl:16}\npubkey: ${pubkey:16}"
    fi    
}


function balance { 
    truncate -s 0 "${FTN_LOG}/balance.log"
    if [ -z "${2}" ]; then
        Acc="${FTN_ACCOUNT}"
    else
        Acc="${2}"
    fi

    tonos account "${Acc}" > ${FTN_LOG}/$1.log
    acc="$(cat "${FTN_LOG}/$1.log" | grep "address:" | awk -F':' '{printf ("address %s:%s", $2, $3)}')"
    bal="$(cat "${FTN_LOG}/$1.log" | grep "balance:" | awk -F':' '{printf ("balance %d", $2/1000000000)}')"
    echo -e "$acc\n$bal"
}


function transactions { 
    tonos run "${FTN_ACCOUNT}" getTransactions {} --abi "${TON_CFG_DIR}/SafeMultisigWallet.abi.json" 2>&1 | tee $FTN_LOG/$1.log
}


function submit { 
    # $1 = submit    # This parameter is always equal to the function name
    # $2 - Target account
    # $3 - Amount    # Please note this ia not NANOAMOUNT!
    # $4 - Bounce    # Can be False or True. 'True' is default value. Non case sensitive.
    # $5 - Payload   # Payload block
    NANO=$(ftn convert $3)
    echo $NANO
    if [ "${4}" = "false" ]; then
      isBounce=false
    else
      isBounce=true
    fi

    #    "${TONOS_CLI}" call "${FT_ACCOUNT}" submitTransaction "{\"dest\":\"${1}\",\"value\":${nt},\"bounce\":"${isBounce}",\"allBalance\":false,\"payload\":\"\"}" --abi "${TON_CFG_DIR}/SafeMultisigWallet.abi.json" --sign "${FTN_SEEDPHRASE}" > "${FTN_LOG}/submit.log" 2>&1 
    tonos call "${FTN_ACCOUNT}" submitTransaction "{\"dest\":\"${2}\",\"value\":${NANO},\"bounce\":"${isBounce}",\"allBalance\":false,\"payload\":\"$5\"}" --abi "${TON_CFG_DIR}/SafeMultisigWallet.abi.json" --sign "${FTN_KEYS_DIR}/msig.keys.json" 2>&1 | tee ${FTN_LOG}/$1.log 
}


function recover { 
    cd "${FTN_DIR}/scripts"
    . "${FTN_DIR}/scripts/env.sh"

    if [ -z "$2" ]; then
        SEND_ATTEMPTS=1
    else
        SEND_ATTEMPTS=$2
    fi
    #set -x

    elector_addr=$(cat "${FTN_KEYS_DIR}/elections/elector-addr-base64")

    "${TON_BUILD_DIR}/lite-client/lite-client" \
        -p "${FTN_KEYS_DIR}/liteserver.pub" -a 127.0.0.1:3031 \
        -rc "runmethod ${elector_addr} compute_returned_stake 0x$(echo "${FTN_ACCOUNT}" | cut -d ':' -f 2)" \
        -rc "quit" &>"${FTN_KEYS_DIR}/elections/recover-state"

    awk '{
        if ($1 == "result:") {
            print $3
        }
    }' "${FTN_KEYS_DIR}/elections/recover-state" >"${FTN_KEYS_DIR}/elections/recover-amount"

    recover_amount=$(cat "${FTN_KEYS_DIR}/elections/recover-amount")
    echo "INFO: recover_amount = ${recover_amount} nanotokens"

    if [ "$recover_amount" != "0" ]; then
        "${TON_BUILD_DIR}/crypto/fift" -I "${TON_SRC_DIR}/crypto/fift/lib:${TON_SRC_DIR}/crypto/smartcont" -s recover-stake.fif "${FTN_KEYS_DIR}/elections/recover-query.boc"

        recover_query_boc=$(base64 --wrap=0 "${FTN_KEYS_DIR}/elections/recover-query.boc")

        for i in $(seq ${SEND_ATTEMPTS}); do
            echo "INFO: tonos-cli submitTransaction attempt #${i}..."
            set -x
            if ! "${UTILS_DIR}/tonos-cli" call "${FTN_ACCOUNT}" submitTransaction \
                "{\"dest\":\"${elector_addr}\",\"value\":\"1000000000\",\"bounce\":true,\"allBalance\":false,\"payload\":\"${recover_query_boc}\"}" \
                --abi "${CONFIGS_DIR}/SafeMultisigWallet.abi.json" \
                --sign "${FTN_KEYS_DIR}/msig.keys.json"; then
                echo "INFO: tonos-cli submitTransaction attempt #${i}... FAIL"
            else
                echo "INFO: tonos-cli submitTransaction attempt #${i}... PASS"
                break
            fi
            set +x
        done

        date +"INFO: %F %T Recover of $recover_amount GR requested"
        exit 0
    else
        echo "INFO: nothing to recover"
    fi
}


function exec {  
    tonos "${@:2}" 2>&1 | tee $FTN_LOG/$1.log
}


function help {
    . $FTN_WRP/lib/ftnlibhelp
    if [ -n "$2" ]; then
        section=$2
    else
        section="overview"
    fi

    echo "${_help[$section]}"
}
