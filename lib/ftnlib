
#. /etc/ftn.conf
shopt -s extglob
shopt -s nocasematch

tonos_list="@(convert|balance|transactions|confirm|submit|config|runget|exec|getconfig)"
ftn_base_list="@(checkrounds|accounts|depool|mode|help)"
ftn_node_list="@(adnl|timediff|checkstake|checkconn)"
msig_elector_list="@(electionlog|electionrun|extrastake|setstake|recover)"

ftn_version="0.2.3"


##########
# Common stuff

function get_account {
    if [ -z "$1" ]; then
        account=$FTN_ACCOUNT
    elif [ -r "$FTN_KEYS_DIR/$1.addr" ]; then
        account=$(cat $FTN_KEYS_DIR/$1.addr)
    elif [[ $1 == *":"* ]]; then
        account=$1
    else
        echo "Error: can't recognize account ($1). The subcommand cannot be proceeded."
        exit 1
    fi
}


function version {
    echo "ftn $ftn_version"
}


function get_mode {
    test $(ps -u $(whoami) -o command | grep -v grep | grep -c validator-engine) -gt 0 && mode="validator" || mode="tonos"
}


function tonos {
    date
    echo "ftnlib.tonos: $@"
    cd $TONOS_CLI_DIR
    test "$TONOS_CFG_FILE" && $TONOS_CLI_DIR/tonos-cli --config $TONOS_CFG_FILE $@ \
      || $TONOS_CLI_DIR/tonos-cli $@
    cd $OLD_PWD
}


function tonos2j {
    declare _cmd=$@
    declare _tonos_output=$(tonos $_cmd)
    declare _num=$(echo -e "$_tonos_output" | grep -n "Result:" | awk -F ':' '{print $1}')
    declare _cropped_output=$(echo "$_tonos_output" | tail +$(($_num+1)) )
    echo "{$_cropped_output"
}


function check_keyring {
    declare List=$1
    declare Since=$2
    IsMatched=0
    while IFS= read -r -d '' filename; do
        declare -l key=$(echo "${filename#"${filename%%[!0]*}"}")
        declare -i result=$(echo "$List" | grep -c "$key")
        if [[ $result -gt 0 ]]; then
            echo "Matched! (adnl: $key)"
            IsMatched=$result
            break
        fi
    done < <(find $FTN_DB_DIR/db/keyring/ -cmin "-$Since" -type f -printf "%f\0")
}


##########
# Commands for the ftn_base_list

function help {
    . $FTN_WRP/lib/ftnlibhelp
    test $2 && section=$2 || section="overview"
    echo "${_help[$section]}"
}


function accounts {
    for alias in $(find $FTN_KEYS_DIR -name '*.addr' -printf "%f\n" | cut -d. -f1); do
        echo "account: $(cat $FTN_KEYS_DIR/$alias.addr) (alias: $alias)"
    done
}


function depool {
    . $FTN_WRP/lib/ftnlibdepool
    depool_list="@(events|info|participant|tick|stake|replenish|getrounds|help)"
    test $2 &&
        case "$2" in
        $depool_list) set "$1" "dpl_$2" "${@:3}"; $2 ${@:2};;
        *) echo "Subcommand $2 not recognized. Please try using \"ftn help depool\".";;
        esac
}


function mode {
    get_mode
    echo "ftn works in '$mode' mode"
}


function checkrounds {
    . $FTN_WRP/lib/ftnlibdepool
    result="$(dpl_getrounds)"
    declare -a rounds
    rounds=$(echo "$result" | jq -r '.rounds[]?.id')
    nano=$((10**9))
    . $FTN_WRP/lib/ftnlibdcodes
    for round in $rounds; do 
        reason=$(echo "$result" | jq -r '.rounds | ."'$round'" | .completionReason')
        step=$(echo "$result" | jq -r '.rounds | ."'$round'" | .step')
        f_stake=$(echo "$result" | jq -r '.rounds | ."'$round'" | .stake')
        v_stake=$(echo "$result" | jq -r '.rounds | ."'$round'" | .validatorStake')
        reward=$(echo "$result" | jq -r '.rounds | ."'$round'" | .rewards')
        n=$(echo "$result" | jq -r '.rounds | ."'$round'" | .participantQty')
        hash=$(echo "$result" | jq -r '.rounds | ."'$round'" | .vsetHashInElectionPhase')
        echo -e "roundID $round 
        reason:          $((16#${reason:2})) ($reason ${_dcode_reason[$reason]})
        step:            $((16#${step:2})) ($step ${_dcode_step[$step]})
        full stake:      $((16#${f_stake:2}/$nano)) ($f_stake)
        validaror stake: $((16#${v_stake:2}/$nano)) ($v_stake)
        participants:    $((16#${n:2})) ($n)
        reward:          $((16#${reward:2})) ($reward)
        hash:            $hash
        "
    done
}


##########
# Commands for the tonos_list

function getconfig {
    tonos $@ 2>&1 | tee -a $FTN_LOG/$1.log
}


function config {
    tonos $@ 2>&1 | tee -a $FTN_LOG/$1.log
}


function runget {
    elector_addr=$(ftn getconfig 1 | tail -1 | tr -d '" ' | awk -F: '{print "-1:"$2}')
    tonos $1 $elector_addr $2 2>&1 | tee -a $FTN_LOG/$1.log
}


function convert {
    tonos $1 tokens $2 | tail -1
}


function balance { 
    get_account $2
    declare -r result=$(tonos account "$account" | tee -a $FTN_LOG/$1.log)
    declare -r address=$(echo "$result" | grep address | awk '{print $2}')
    declare -r balance=$(echo "$result" | grep balance | awk '{print $2/1000000000}')
    declare -r state=$(echo "$result" | grep acc_type | awk '{print $2}')
    declare -r last_paid=$(echo "$result" | grep last_paid | awk '{print $2}' | xargs -I % date -d@%)
    echo -e "\
    address:    $address
    status:     $state
    balance:    $balance
    previous transaction: $last_paid\
    "
}


function transactions { 
    get_account $2
    tonos2j run $account getTransactions {} --abi $MULSIG_CONTRACT_DIR/SafeMultisigWallet.abi.json 2>&1 | tee -a $FTN_LOG/$1.log
}


function confirm {
    # $1 = confirm    # This parameter is always equal to the function name
    # $2 - Key name (i.e. custodian1.key.json. Please make sure the key is located in FTN_KEYS_DIR)
    # $3 - Transactions ID
    if [ -z "$3" ]; then
        for trx in $(transactions | grep \"id\": | tr -d '",' | awk '{print $2}'); do
            read -r -d '' PARAMS << EOD || true
            {"transactionId":"$trx"}
EOD
            tonos call $FTN_ACCOUNT confirmTransaction $PARAMS --abi $MULSIG_CONTRACT_DIR/SafeMultisigWallet.abi.json --sign $FTN_KEYS_DIR/$2 2>&1 | tee -a $FTN_LOG/$1.log
        done
    else
        read -r -d '' PARAMS << EOD || true
        {"transactionId":"$3"}
EOD
        tonos call $FTN_ACCOUNT confirmTransaction $PARAMS --abi $MULSIG_CONTRACT_DIR/SafeMultisigWallet.abi.json --sign $FTN_KEYS_DIR/$2 2>&1 | tee -a $FTN_LOG/$1.log
    fi
}


function submit { 
    # $1 = submit    # This parameter is always equal to the function name
    # $2 - Target account
    # $3 - Amount    # Please note this ia not NANOAMOUNT!
    # $4 - Bounce    # Can be False or True. 'True' is default value. Non case sensitive.
    # $5 - Payload   # Payload block
    get_account $2
    NANO=$(ftn convert $3)
    test "$4" = "false" && isBounce="false" || isBounce="true"
    read -r -d '' PARAMS << EOD || true
    {"dest":"$account","value":"$NANO","bounce":"$isBounce","allBalance":"false","payload":"$5"}
EOD
    if test -r $FTN_KEYS_DIR/$DEFAULT_KEY; then
        tonos call $FTN_ACCOUNT submitTransaction $PARAMS --abi $MULSIG_CONTRACT_DIR/SafeMultisigWallet.abi.json --sign $FTN_KEYS_DIR/$DEFAULT_KEY 2>&1 | tee -a $FTN_LOG/$1.log 
    else
        echo "Error: signature key file not found."
        exit 1
    fi
}


function exec {
    tonos "${@:2}" 2>&1 | tee -a $FTN_LOG/$1.log
}


##########
# Commands for the msig_elector_list

function electionlog {
    if [ -z "$2" ]; then
        lines=14
    else
        if [ "$2" == "full" ]; then
            tail -n 30 "${FTN_LOG}/election.log"
            exit 0
        else
            lines=$2
        fi
    fi
    tail -n $lines "${FTN_LOG}/election.log" | grep "INFO:"
}


function electionrun {
    if [ -z $2 ]; then
        STAKE=$(cat "${FTN_KEYS_DIR}/elections/stake" 2>/dev/null || STAKE='')
    else
        STAKE=$2
    fi

    if [ -z "$STAKE" ]; then
        echo "<STAKE> is not set. Please use \"ftn setstake\" or \"ftn electionrun <STAKE>\""
        exit 0
    fi

    if [ "$FTN_AUTO_BACKUP_KEYS" == "Y" ]; then
        #Backup old keys before sending a new stake
        gzip -rc "${FTN_KEYS_DIR}" > "$FTN_BACKUP_DIR/elections.$(date +%Y.%m.%d_%H-%M).gz"
        gzip -rc "${FTN_DB_DIR}/db/keyring/" > "$FTN_BACKUP_DIR/keyring.$(date +%Y.%m.%d_%H-%M).gz"
    fi

    #truncate -s 0 "${FTN_LOG}/election.log"
    cd "${FTN_DIR}/scripts"
    ./validator_msig.sh $STAKE | tee -a "$FTN_LOG/election.log" 2>&1
    cd "${OLDPWD}"
    tail -n 14 "${FTN_LOG}/election.log"
}


function extrastake {
    if [ -z "$2" ]; then
        echo "Amount of extrastake is not given."
        exit 1
    fi
    elector_addr=$(cat $FTN_KEYS_DIR/elections/elector-addr-base64)
    EXT_STAKE=$2
    payload="$(base64 --wrap=0 $FTN_KEYS_DIR/elections/validator-query.boc)"

    # input parameters for 'submit' function
    # $1 = submit    # Must be equal to the function name
    # $2 - Target account
    # $3 - Tokens    # Please note this ia not NANOAMOUNT!
    # $4 - Bounce    # Can be False or True. 'True' is default value. Non case sensitive.
    # $5 - Payload   # Payload block
    submit "submit" $elector_addr $EXT_STAKE "True" $payload
}


function setstake { 
#    . "${FTN_DIR}/scripts/env.sh"

#    function get_mid_stake {
#        ELECTOR_ADDR="$(cat "$KEYS_DIR/elections/elector-addr-base64")"
#            LC_OUTPUT="$($TON_BUILD_DIR/lite-client/lite-client \
#            -a 127.0.0.1:3031 \
#            -p $KEYS_DIR/liteserver.pub \
#            -rc "getconfig 34" \
#        -rc "$(printf "runmethod %s past_elections" "$ELECTOR_ADDR")" \
#        -rc "quit" 2>&1)"
#    #   echo $LC_OUTPUT
#        TOTAL_NODES=$(echo "$LC_OUTPUT" | perl -ne '/^\s*cur_validators:.*total:(\d+).*$/ && print $1')
#        TOTAL_STAKE=$(echo "$LC_OUTPUT" | \
#            perl -ne '/^result:\s*\[\s*\((?>\[\d+ \d+ \d+ \d+ [\{\}\(\)A-F0-9]+ (\d+) \d+ [\{\}\(\)A-F0-9]+\]\s*)*\)\s*\]\s*$/ && print $1')
#        TOTAL_STAKE=$((TOTAL_STAKE/1000000000))
#        MID_STAKE=$((TOTAL_STAKE/TOTAL_NODES))
#        echo "$TOTAL_STAKE/$TOTAL_NODES=$MID_STAKE"
#    }

    #get_mid_stake
    bal=$(ftn balance | grep "balance" | awk '{print $2}')
    echo "Account balance $bal"
    #echo "Got mid stake $MID_STAKE"

    if [ -n "$2" ]; then
        echo "Given the size of stake $2"
        stake=$2
    else
        stake=0
        echo "The stake size is not given. Set stake=$stake"
        #stake=$MID_STAKE
    fi

    if [[ $stake -gt $bal ]]; then
        echo "The stake is greater than the balance. The stake is aligned to the balance-1"
        stake=$((bal-1))
    fi

    if [[ $stake -lt 10000 ]]; then
        echo "The stake less than the minimal. Set 0 stake"
        stake=0
    fi
    echo $stake > "${FTN_KEYS_DIR}/elections/stake"
    echo "${stake} set as stake."
}


function recover { 
    cd "${FTN_DIR}/scripts"
    . "${FTN_DIR}/scripts/env.sh"

    if [ -z "$2" ]; then
        SEND_ATTEMPTS=1
    else
        SEND_ATTEMPTS=$2
    fi
    #set -x

    elector_addr=$(cat "${FTN_KEYS_DIR}/elections/elector-addr-base64")

    "${TON_BUILD_DIR}/lite-client/lite-client" \
        -p "${FTN_KEYS_DIR}/liteserver.pub" -a 127.0.0.1:3031 \
        -rc "runmethod ${elector_addr} compute_returned_stake 0x$(echo "${FTN_ACCOUNT}" | cut -d ':' -f 2)" \
        -rc "quit" &>"${FTN_KEYS_DIR}/elections/recover-state"

    awk '{
        if ($1 == "result:") {
            print $3
        }
    }' "${FTN_KEYS_DIR}/elections/recover-state" >"${FTN_KEYS_DIR}/elections/recover-amount"

    recover_amount=$(cat "${FTN_KEYS_DIR}/elections/recover-amount")
    echo "INFO: recover_amount = ${recover_amount} nanotokens"

    if [ "$recover_amount" != "0" ]; then
        "${TON_BUILD_DIR}/crypto/fift" -I "${TON_SRC_DIR}/crypto/fift/lib:${TON_SRC_DIR}/crypto/smartcont" -s recover-stake.fif "${FTN_KEYS_DIR}/elections/recover-query.boc"

        recover_query_boc=$(base64 --wrap=0 "${FTN_KEYS_DIR}/elections/recover-query.boc")

        for i in $(seq ${SEND_ATTEMPTS}); do
            echo "INFO: tonos-cli submitTransaction attempt #${i}..."
            set -x
            if ! "${UTILS_DIR}/tonos-cli" call "${FTN_ACCOUNT}" submitTransaction \
                "{\"dest\":\"${elector_addr}\",\"value\":\"1000000000\",\"bounce\":true,\"allBalance\":false,\"payload\":\"${recover_query_boc}\"}" \
                --abi "${CONFIGS_DIR}/SafeMultisigWallet.abi.json" \
                --sign "${FTN_KEYS_DIR}/msig.keys.json"; then
                echo "INFO: tonos-cli submitTransaction attempt #${i}... FAIL"
            else
                echo "INFO: tonos-cli submitTransaction attempt #${i}... PASS"
                break
            fi
            set +x
        done

        date +"INFO: %F %T Recover of $recover_amount GR requested"
        exit 0
    else
        echo "INFO: nothing to recover"
    fi
}


##########
# Commands for the ftn_node_list

function timediff {  
    cd "$FTN_DIR/scripts"
    . ./check_node_sync_status.sh | grep "TIME_DIFF" | awk '{print $4}' 2>&1
}


function adnl { 
    adnlfile="$FTN_KEYS_DIR/elections/$(hostname -s)-election-adnl-key"
    #keyfile="$FTN_KEYS_DIR/elections/$(hostname -s)-election-key"
    if test -r $adnlfile; then
        adnl=$(cat "$adnlfile" | grep "created new key")
        #pubkey=$(cat "${keyfile}" | grep "created new key")
        #echo -e "adnl: ${adnl:16}\npubkey: ${pubkey:16}"
        echo -e "adnl: ${adnl:16}"
    else
        echo "$adnlfile file not found."
    fi
}

function checkstake {
    #getconfig 32 -- prev cycle
    #getconfig 34 -- current cycle
    #getconfig 36 -- next cycle. Exists only if elections are over and the new cycle is not started yet.
    #runget $ELECTOR_ADDR participant_list_extended -- in case the elections are open

    getconfig32=$(ftn getconfig 32)
    getconfig34=$(ftn getconfig 34)

    declare -i posixtime=$(date +%s)
    prev_since=$(echo "$getconfig32" | grep utime_since | tr -d ',"' | awk '{print $2}')
    curr_since=$(echo "$getconfig34" | grep utime_since | tr -d ',"' | awk '{print $2}')
    prev_min_ago=$(awk "BEGIN {print ($posixtime-$prev_since)/60}")
    curr_min_ago=$(awk "BEGIN {print ($posixtime-$curr_since)/60}")

    echo "system time: $posixtime | $(date -d@$posixtime)"
    echo "Previous cycle from $prev_since. Started $prev_min_ago min ago"
    echo "Current cycle from $curr_since. Started $curr_min_ago min ago"

    declare active_election=$(ftn runget active_election_id | grep "Result:" | tr -d '[]",' | awk '{ print substr($2,3) }')
    echo "active election id: $active_election"

    declare -i code=0
    if [ "$active_election" = "0" ]; then
        echo "No active elections. Let's check if we are validating the current cycle."
        check_keyring "$getconfig34" "$prev_min_ago"
        test $IsMatched -gt 0 && echo "OK. We are validatating this cycle." || {
            echo "Not OK. We are not in the list of the validators for the current cycle."
            code=1
        }
        end_offset=$(ftn getconfig 15 | grep elections_end_before | awk '{print $2}' | tr -d ,)
        curr_until=$(echo "$getconfig34" | grep utime_until | tr -d ',"' | awk '{print $2}')
        elections_end=$((curr_until-end_offset))
        if [[ $posixtime -gt $elections_end ]]; then
            echo "Elections for the next cycle are over. Checking if we are in the list for the next cycle."
            getconfig36=$(ftn getconfig 36)
            check_keyring "$getconfig36" "$prev_min_ago"
            test $IsMatched -gt 0 && echo "OK. We will validate the next cycle." || {
                echo "Not OK. We are not in the list of the validators for the next cycle."
                code=1
            }
        fi
    else
        echo "Elections are opened ($active_election). Checking whether the node has sent a stake for the next cycle."
        pList=$(ftn runget participant_list_extended)
        check_keyring "$pList" "$curr_min_ago"
        test $IsMatched -gt 0 && echo "OK. The node has sent a stake." || {
            echo "Not OK. The node has not sent the stake for the next cycle yet."
            code=1
        }
    fi
    exit $code
}

function checkconn {
    declare -i code=0
    declare -r PARMS="-t 5 -a 127.0.0.1:3030 -k $FTN_KEYS_DIR/client -p $FTN_KEYS_DIR/server.pub"
    declare -r CMD="-c quit"
    date | tee -a $FTN_LOG/$1.log
    declare -r conn=$($FTN_DIR/ton/build/validator-engine-console/validator-engine-console $PARMS $CMD | tee -a $FTN_LOG/$1.log)
    declare -r status=$(echo -e "$conn" | tail -1 | grep conn | awk '{print $2}')
    echo "$conn" 
    test $status = "failed" && code=1
    exit $code
}